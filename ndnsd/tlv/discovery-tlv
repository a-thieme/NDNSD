/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2014-2019,  The University of Memphis
 *
 * This file is part of NDNSD.
 * See AUTHORS.md for complete list of NDNSD authors and contributors.
 *
 * NDNSD is free software: you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 *
 * NDNSD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE.  See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with
 * NDNSD, e.g., in COPYING.md file.  If not, see <http://www.gnu.org/licenses/>.
 **/


#include "discovery-tlv.hpp"

#include <iostream>

#include <ndn-cxx/util/ostream-joiner.hpp>

namespace ndnsd {
namespace discovery {

DiscoveryTLV::DiscoveryTLV(const ndn::Block& block)
{
  wireDecode(block);
}


template<ndn::encoding::Tag TAG>
size_t
DiscoveryTLV::wireEncode(ndn::EncodingImpl<TAG>& block) const
{

  size_t totalLength = 0;

  // totalLength += prependStringBlock(block, tlv::DiscoveryData, );
  // totalLength += prependVarNumber(totalLength);
  // totalLength += encoder.prependVarNumber(tlv::ServiceStatus);

  // size_t totalLength = 0;

  // for (auto it = m_contentWithBlock.rbegin(); it != m_contentWithBlock.rend(); ++it) {
  //   if (it->second) {
  //     totalLength += block.prependBlock(ndn::Block(tlv::DiscoveryData, *it->second));
  //   }
  //   totalLength += it->first.wireEncode(block);
  // }

  // totalLength += block.prependVarNumber(totalLength);
  // totalLength += block.prependVarNumber(tlv::PSyncContent);

  // return totalLength;

}

const ndn::Block&
DiscoveryTLV::wireEncode()
{
  if (m_wire.hasWire())
    return m_wire;

  m_wire = ndn::Block(tlv::DiscoveryData);
  m_wire.push_back(makeNonNegativeIntegerBlock(tlv::ServiceStatus, m_code));
  m_wire.push_back(makeStringBlock(tlv::ServiceInfo, ServiceInfo));

  m_wire.encode();
  return m_wire;

}

void
DiscoveryTLV::wireDecode(const ndn::Block& wire)
{

}

} // namespace discovery
} // namespace ndnsd